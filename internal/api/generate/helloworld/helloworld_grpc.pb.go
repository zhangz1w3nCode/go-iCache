// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.3
// source: helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestService_CreateCache_FullMethodName = "/helloworld.TestService/CreateCache"
	TestService_GetCacheKey_FullMethodName = "/helloworld.TestService/GetCacheKey"
	TestService_SetCacheKey_FullMethodName = "/helloworld.TestService/SetCacheKey"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type TestServiceClient interface {
	// Sends a greeting
	CreateCache(ctx context.Context, in *CreateCacheRequest, opts ...grpc.CallOption) (*CreateCacheReply, error)
	GetCacheKey(ctx context.Context, in *GetCacheKeyRequest, opts ...grpc.CallOption) (*GetCacheKeyReply, error)
	SetCacheKey(ctx context.Context, in *SetCacheKeyRequest, opts ...grpc.CallOption) (*SetCacheKeyReply, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) CreateCache(ctx context.Context, in *CreateCacheRequest, opts ...grpc.CallOption) (*CreateCacheReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCacheReply)
	err := c.cc.Invoke(ctx, TestService_CreateCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetCacheKey(ctx context.Context, in *GetCacheKeyRequest, opts ...grpc.CallOption) (*GetCacheKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCacheKeyReply)
	err := c.cc.Invoke(ctx, TestService_GetCacheKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) SetCacheKey(ctx context.Context, in *SetCacheKeyRequest, opts ...grpc.CallOption) (*SetCacheKeyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCacheKeyReply)
	err := c.cc.Invoke(ctx, TestService_SetCacheKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility.
//
// The greeting service definition.
type TestServiceServer interface {
	// Sends a greeting
	CreateCache(context.Context, *CreateCacheRequest) (*CreateCacheReply, error)
	GetCacheKey(context.Context, *GetCacheKeyRequest) (*GetCacheKeyReply, error)
	SetCacheKey(context.Context, *SetCacheKeyRequest) (*SetCacheKeyReply, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServiceServer struct{}

func (UnimplementedTestServiceServer) CreateCache(context.Context, *CreateCacheRequest) (*CreateCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCache not implemented")
}
func (UnimplementedTestServiceServer) GetCacheKey(context.Context, *GetCacheKeyRequest) (*GetCacheKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCacheKey not implemented")
}
func (UnimplementedTestServiceServer) SetCacheKey(context.Context, *SetCacheKeyRequest) (*SetCacheKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCacheKey not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}
func (UnimplementedTestServiceServer) testEmbeddedByValue()                     {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_CreateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).CreateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_CreateCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).CreateCache(ctx, req.(*CreateCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetCacheKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetCacheKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetCacheKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetCacheKey(ctx, req.(*GetCacheKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_SetCacheKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCacheKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).SetCacheKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_SetCacheKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).SetCacheKey(ctx, req.(*SetCacheKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCache",
			Handler:    _TestService_CreateCache_Handler,
		},
		{
			MethodName: "GetCacheKey",
			Handler:    _TestService_GetCacheKey_Handler,
		},
		{
			MethodName: "SetCacheKey",
			Handler:    _TestService_SetCacheKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}
